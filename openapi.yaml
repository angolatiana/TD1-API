openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/HEIANGOLATIANA/libraryManagement/1.0.0
info:
  version: "1.0.0"
  title: home-iot-api
  description: The API for the EatBacon IOT project

paths:
  /books:
    get:
      summary: Retrieve a list of books
      parameters:
        - name: bookName
          in: query
          description: The name of the book to filter by
          required: false
          schema:
            type: string
        - name: releaseDate
          in: query
          description: The release date range to filter by
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Add a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '201':
          description: Book created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    put:
      summary: Update an existing book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '200':
          description: Book updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    delete:
      summary: Delete a book by ID
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Book deleted

  /authors:
    get:
      summary: Retrieve a list of authors
      parameters:
        - name: authorName
          in: query
          description: The name of the author to filter by
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      summary: Add a new author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorInput'
      responses:
        '201':
          description: Author created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    put:
      summary: Update an existing author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorInput'
      responses:
        '200':
          description: Author updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    delete:
      summary: Delete an author by ID
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Author deleted

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum: [ROMANCE, COMEDY, OTHER]
        releaseDate:
          type: string
          format: date
    
    BookInput:
      type: object
      properties:
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum: [ROMANCE, COMEDY, OTHER]
        releaseDate:
          type: string
          format: date

    Author:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        sex:
          type: string
          enum: [M, F]

    AuthorInput:
      type: object
      properties:
        name:
          type: string
        sex:
          type: string
          enum: [M, F]